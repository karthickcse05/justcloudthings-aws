AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"

Description: >
  Scheduled Lambda function that will start or stop the RDS instance based on the time.

Parameters:
  ClusterName:
    Type: String
    Default: test
    Description: cluster name of the RDS.

Resources:
  RDSLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: rds-lambda-execution-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: rds-lambda-execution-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - rds:DescribeDBInstances
                  - rds:StopDBInstance
                  - rds:StartDBInstance
                  - rds:StartDBCluster
                  - rds:StopDBCluster
                Resource: "*"

  RDSStartStopFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Description: "Lambda to start or stop the RDS instance"
      FunctionName: "Lambda_Start_Stop_RDS_Latest"
      Handler: lambda_function.lambda_handler
      Runtime: python3.7
      Role: !GetAtt RDSLambdaExecutionRole.Arn
      CodeUri: ./src/lambda_function.py
      Environment:
        Variables:
          DBClusterName: !Ref ClusterName
      MemorySize: 128
      Timeout: 30

  RDSStartEventRule:
    Type: AWS::Events::Rule
    DependsOn: RDSStartStopFunction
    Properties:
      Description: "Trigger every day to start the RDS"
      ScheduleExpression: "cron(30 3 ? * MON-FRI *)"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt "RDSStartStopFunction.Arn"
          Id: "StartFunction"
          Input: '{"service":"start"}'

  RDSStopEventRule:
    Type: AWS::Events::Rule
    DependsOn: RDSStartStopFunction
    Properties:
      Description: "Trigger every day to stop the RDS"
      ScheduleExpression: "cron(30 14 ? * MON-FRI *)"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt "RDSStartStopFunction.Arn"
          Id: "StopFunction"
          Input: '{"service":"stop"}'

  LambdaStartPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "RDSStartStopFunction.Arn"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt RDSStartEventRule.Arn

  LambdaStopPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "RDSStartStopFunction.Arn"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt RDSStopEventRule.Arn
